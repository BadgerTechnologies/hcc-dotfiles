#!/usr/bin/python

# Helper script for finding vims backgrounded in the shell and opening files
# within one of thm or launching a new vim. Tightly coupled with associated
# shell function.

import sys
import re
import os
try:
    from shlex import quote as shellquote
except:
    from pipes import quote as shellquote
import pdb

def parse_jobs(lines, all=False):
    vim_filter = ('vim ', '')[all]
    jobs_re = re.compile(r'(?P<job_prefix>\[(?P<jobnum>\d+)\]  (?P<flag>[ +-]) (?P<pid>\d+) (?P<status>\w+))\s+' + vim_filter + '.*')
    servername_re = re.compile(r'--servername (?P<servername>\w+)')
    rows = []

    for line in lines:
        m = jobs_re.match(line)
        if(m is not None):
            row = m.groupdict()
            with open(os.path.join('/proc', row['pid'], 'cmdline'), 'r') as cmd_file:
                row['cmdline'] = cmd_file.read().replace('\x00', ' ').rstrip()
            sm = servername_re.search(row['cmdline'])
            try:
                row['servername'] = sm.group('servername')
            except:
                if (all):
                    row['servername'] = ''
                else:
                    continue
            rows.append(row)
    return rows

def unique_servername():
    seq_filename = os.path.expanduser('~/.config/vim_seq_num')
    try:
        with open(seq_filename, 'r') as f:
            seqnum = int(f.readline())
        seqnum += 1
    except:
        seqnum = 0
    with open(seq_filename, 'w') as f:
        f.write(str(seqnum) + '\n')
    return('vim' + str(seqnum))

def launch_new_vim(tmpfile, args):
    servername = unique_servername()
    args = [ 'vim', '--servername', servername ] + args
    cmd = ' '.join([shellquote(a) for a in args])
    with open(tmpfile, 'w') as f:
        f.write(cmd + ' &\n')

def send_to_existing_vim(tmpfile, job, args):
    with open(tmpfile, 'w') as f:
        f.write(str(job['jobnum']) + '\n')
    args = [ 'vim', '--servername', job['servername'], '--remote' ] + args
    os.execvp('vim', args)

def find_job_in_list(joblist, reply):
    reply = int(reply)
    for job in joblist:
        if (reply == int(job['jobnum'])):
            return job
    raise Exception('Canceled')

def list_jobs(joblist):
    for job in joblist:
        print('{} {}'.format(job['job_prefix'], job['cmdline']))

def choose_which_vim(joblist):
    print("There are %d vims running in this shell. Choose one:" % len(joblist))
    list_jobs(joblist)
    print('[q] Cancel   [n] New vim')
    reply = sys.stdin.readline().strip()
    if (reply in ('q', 'Q', 'n', 'N')):
        return(reply)
    job = find_job_in_list(joblist, reply)
    return(job)

def launch_in_vim(tmpfile, joblist, args):
    if(len(joblist) == 0):
        launch_new_vim(tmpfile, args)
    elif(len(joblist) == 1):
        send_to_existing_vim(tmpfile, joblist[0], args)
    else:
        try:
            job = choose_which_vim(joblist)
        except Exception as e:
            print('Canceled')
            return(0)

        if (job == 'q'):
            return(0)
        elif (job == 'n'):
            launch_new_vim(tmpfile, args)
        else:
            send_to_existing_vim(tmpfile, job, args)


if (sys.argv[1] != '--tempfile'):
    print("Error: Required parameter --tempfile missing\n")
    print("       Please run this from shell wrapper function v\n")
    exit(1)

tmpfile = sys.argv[2]
args = sys.argv[3:]
    
with open(tmpfile, 'r') as file:
    lines = file.read().splitlines()
os.unlink(tmpfile)
if (args[0] == '--list-jobs'):
    list_jobs(parse_jobs(lines, all=True))
else:
    launch_in_vim(tmpfile, parse_jobs(lines), args)

