# vim: set et sw=4 foldmethod=marker foldmarker={{{,}}}:

# Vim Users: This config file uses folds to expand & collapse sections.
# Use zo to open a section, and zc to close a section.

#====[ Basic Bindings ]================================================== {{{1
# Set the prefix to ^A.
unbind C-b
set -g prefix ^A

# Reload config file
unbind r  # Was refresh-client, which is now ^L
bind   r source ~/.tmux.conf \; display-message "Reloaded .tmux.conf"

# screen c - Create a new window.
# NOTE: I don't map ^C here because I use that for X clipboard integration below
unbind c
bind   c new-window -c '#{pane_current_path}'

# detach ^D d
unbind ^D
bind   ^D detach

# displays *
unbind *
bind   * list-clients

# title A
unbind A
bind   A command-prompt "rename-window %%"

#====[ Window switching, etc ]================================================== {{{1

# Switch windows ^H, ^L
unbind    C-h
bind   -r C-h select-window -p
unbind    C-l
bind   -r C-l select-window -n

# windows ^W w
unbind ^W
bind   ^W list-windows
unbind w
bind   w display-message "Switch to Window..." \; choose-window "select-window -t %%"

# quit \  NOTE: The space on the end of the following line is significant:
unbind \ 
# NOTE Disabling this because it can cause me to accidentally exit all of tmux
# when I intended to exit only a screen serial port session!
# bind   \ confirm-before "kill-server"

# redisplay F5
# Dont' use more-intutive ^L cuz I want it to be "next-window"
unbind F5
bind   F5 refresh-client

# Direct access to windows beyond #9
# Note: To use these in gnome-terminal 3.6, select Edit/Keyboard Shortcuts...
#       and disable use of Alt+N to select tab #N. Can make it use Ctrl+N if
#       preferred, as gnome-terminal can recognize Ctrl+<Number>, but tmux can't
#       Disable a gnome-terminal by trying to map it to <Backspace>.
unbind    M-0 ; bind    M-0   select-window -t:10
unbind    M-1 ; bind    M-1   select-window -t:11
unbind    M-2 ; bind    M-2   select-window -t:12
unbind    M-3 ; bind    M-3   select-window -t:13
unbind    M-4 ; bind    M-4   select-window -t:14
unbind    M-5 ; bind    M-5   select-window -t:15
unbind    M-6 ; bind    M-6   select-window -t:16
unbind    M-7 ; bind    M-7   select-window -t:17
unbind    M-8 ; bind    M-8   select-window -t:18
unbind    M-9 ; bind    M-9   select-window -t:19

#====[ Pane commands ]================================================== {{{1

# vertical split v
# NOTE: tmux has a backwards notion of horizontal vs. vertical, hence -h
unbind v
bind   v split-window -h -c '#{pane_current_path}'

# horizontal split s
# Overrides default: choose-tree
unbind s
bind   s split-window -v -c '#{pane_current_path}'

# Switch panes
unbind Tab
bind   Tab select-pane -t:.+
unbind BTab
bind   BTab select-pane -t:.-

# Swap current window left / right
unbind     M-PPage
bind    -r M-PPage swap-window -t-
unbind     M-NPage
bind    -r M-NPage swap-window -t+

# Pane breaking and joining
# default ! is break-pane
bind @ choose-window "join-pane -vs %%"

#====[ Session Management ]================================================== {{{1

# Switch to next & previous session
unbind    C-j
bind   -r C-j run "~/bin/tmux-session switch-next"
unbind    C-k
bind   -r C-k run "~/bin/tmux-session switch-prev"

# Create New Session
unbind C-s
bind   C-s command-prompt -p "New session name:" "run \"~/bin/tmux-session new-session %%\""

# Rename current session
unbind S
bind   S   command-prompt -p "rename_session (current name is \"#{session_name}\"):" "run \"~/bin/tmux-session rename-session %%\""

# Kill current session
unbind C-x
bind   C-x confirm-before -p "Kill current session \"#{session_name}\")?" "run \"~/bin/tmux-session kill-session --force\""


#====[ Buffer Management ]================================================== {{{1

# Choose buffer, and write it to a file. I wanted to make this prompt for
# filename using command-prompt, but was thwarted by the fact that tmux
# executes all commands for the binding (separated by ; ) in parallel!
unbind >
bind   > display-message "Choose buffer to write to /tmp/tmux-exchange" \; \
         choose-buffer "save-buffer -b %% /tmp/tmux-exchange"

unbind <
bind < load-buffer -b 0 /tmp/tmux-exchange \; paste-buffer -b 0

#----------------------------------------------------------------------
# Integration with X clipboard
#----------------------------------------------------------------------
# NOTE: The eval $(tmux show-env | grep DISPLAY) idiom makes this work
# in an ssh session, interacting with the user's X session where they originated
# the ssh connection from. This is idiom is necessary because tmux doesn't propagate
# the session environment into a run-shell like it does when opening a new window.

# Transfer whatever is in the top tmux buffer to to both the
# X CLIPBOARD and PRIMARY (middle click) clipboards
unbind C-c
bind   C-c run "~/.tmux/tmux-copy-buffer-to-clipboard"

# Same as above, but interactively choose which buffer to copy.
unbind C
bind   C display-message "Choose buffer to copy to X clipboard" \; \
         choose-buffer "run \"~/.tmux/tmux-copy-buffer-to-clipboard %% \" "

# For paste, I have to choose one X selection or another. We'll let C-v paste
# from CLIPBOARD, as that is consistent with other applications, but
# use C-p to paste the PRIMARY (middle-click buffer) instead. NOTE: It is
# a bit more logical to use C-S-v for this, but gnome-terminal intercepts that!
unbind C-v
bind   C-v run "eval $(~/.tmux/tmux-x-display) ; xclip -o -sel clipboard | tmux load-buffer - ; tmux paste-buffer"
unbind C-p
bind   C-p run "eval $(~/.tmux/tmux-x-display) ; xclip -o -sel primary | tmux load-buffer - ; tmux paste-buffer"

# Go a step further and do it as soon selection is made in copy-mode
# when copy-mode is ended vi y (we'll leave Enter to its default just
# so there's a quick way to avoid the X clipboard if desired.
unbind -t vi-copy y
bind-key -t vi-copy   y copy-pipe "~/.tmux/tmux-copy-buffer-to-clipboard"

# Interactively choose a buffer and then do one of the commands in
# The buffer-cmd keytable
unbind b
bind   b      display-message "Choose buffer." \; \
        choose-buffer "set-environment -g TMUXBUF %%; display-message \"Command: (])paste (t)op (e)dit (d)elete (v)from-X-clipboard (p)from-X-selection (*)to-X-clipboards ([)copy-mode (>)write-to-file\"; switch-client -Tbuffer-cmd"

# Go to "buffer-reg" keytable, which will wait for a character to be typed,
# select the buffer having that single-character name, and then wait for
# one of the commands in the "buffer-cmd" keytable to be typed.
# This somewhat immitates Vim's "registers"
unbind C-b
bind   C-b    switch-client -Tbuffer-reg
####source ~/.tmux/buffer-reg-keys.conf
run-shell ~/.tmux/tmux-bind-buffer-reg-keys.sh

# If this is initial start-up (rather than a reload of the conf file),
# the the buffer-cmd keytable will not yet exist and the unbind will
# cause an error. So, wrap it in "run" to suppress the error.
run "tmux unbind -Tbuffer-cmd ] 2>/dev/null"
bind   -Tbuffer-cmd ]   run "tmux paste-buffer -b \$TMUXBUF"

# Delete buffer
unbind -Tbuffer-cmd d
  bind -Tbuffer-cmd d   run "tmux delete-buffer -b \$TMUXBUF"

# Copy X Primary selection into buffer
unbind -Tbuffer-cmd p
  bind -Tbuffer-cmd p   run "eval $(~/.tmux/tmux-x-display) ; xclip -o -sel primary | tmux load-buffer -b \$TMUXBUF -"

# Copy X Clipboard selection into buffer
unbind -Tbuffer-cmd v
  bind -Tbuffer-cmd v   run "eval $(~/.tmux/tmux-x-display) ; xclip -o -sel clipboard | tmux load-buffer -b \$TMUXBUF -"

# Copy buffer to both X selections
unbind -Tbuffer-cmd *
  bind -Tbuffer-cmd *   run "~/.tmux/tmux-copy-buffer-to-clipboard \$TMUXBUF"

# Rename buffer
unbind -Tbuffer-cmd r
  bind -Tbuffer-cmd r   run "~/.tmux/tmux-buffer rename-from-prompt \$TMUXBUF"

# Copy a buffer to another buffer
unbind -Tbuffer-cmd c
  bind -Tbuffer-cmd c   command-prompt -p "Copy selected buffer to (buffer name): " \
                        "run \"tmux save-buffer -b \$TMUXBUF -| tmux load-buffer -b %% -\""

# Edit a buffer in a temporary session
unbind -Tbuffer-cmd e
  bind -Tbuffer-cmd e   run "~/.tmux/tmux-buffer edit-buffer-in-temp-session \$TMUXBUF"

# Display help about these buffer commands
unbind -Tbuffer-cmd h
  bind -Tbuffer-cmd h   run "cat ~/.tmux/tmux-buffers-help.txt"

#====[ Copy mode stuff ]================================================== {{{1

set-option -g mode-keys vi

unbind -t vi-copy    Home
bind   -t vi-copy    Home start-of-line  # Default: ^
unbind -t vi-copy     End
bind   -t vi-copy     End end-of-line    # Default: $

# These don't work because libvte, upon which gnome-terminal is based,
# is broken. It sends the same key code for Home and Ctrl-Home, for e.g.
# See https://bugzilla.gnome.org/show_bug.cgi?id=375652
# NOTE: THIS BUG IS SIX YEARS OLD!  Pathetic!
unbind -t vi-copy  C-Home
bind   -t vi-copy  C-Home history-top    # Default: g
unbind -t vi-copy   C-End
bind   -t vi-copy   C-End history-bottom # Default: G

unbind -t vi-copy C-Right
bind   -t vi-copy C-Right next-space-end # Default: E
unbind -t vi-copy  C-Left
bind   -t vi-copy  C-Left previous-space # Default: B


