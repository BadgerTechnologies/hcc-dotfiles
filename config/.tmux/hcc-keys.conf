# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
unbind a
bind   a send-prefix

# Reload config file
unbind r  # Was refresh-client, which is now ^L
bind   r source ~/.tmux.conf \; display-message "Reloaded .tmux.conf"

# screen c - Create a new window.
# NOTE: I don't map ^C here because I use that for X clipboard integration below
unbind c
bind   c new-window

# detach ^D d
unbind ^D
bind   ^D detach

# displays * 
unbind *
bind   * list-clients

# title A
unbind A
bind   A command-prompt "rename-window %%"

# Switch windows ^H, ^L, -n Alt-PgUp, Alt-PgDown
unbind    C-h
bind   -r C-h select-window -p
unbind    C-l
bind   -r C-l select-window -n
unbind -n M-PPage
bind   -n M-PPage select-window -p
unbind -n M-NPage
bind   -n M-NPage select-window -n

# Toggle to last window ^A
unbind ^A
bind   ^A last-window

# windows ^W w 
unbind ^W
bind   ^W list-windows
unbind w
bind   w display-message "Switch to Window..." \; choose-window "select-window -t %%"

# quit \ 
unbind \
bind   \ confirm-before "kill-server"

# NOTE: Let's not use screen's  k nor ^K for kill-window, cuz
# I want to use hjkl to select panes.
# Instead, we'll just use the default x to kill-pane.
# The window will die if has only 1 pane

# redisplay F5
# Dont' use more-intutive ^L cuz I want it to be "next-window"
unbind F5
bind   F5 refresh-client

# vertical split | v
# NOTE: tmux has a backwards notion of horizontal vs. vertical, hence -h
unbind |
bind   | split-window -h
unbind v
bind   v split-window -h

# horizontal split s
unbind s
bind   s split-window -v

# Switch panes
unbind Tab
bind   Tab select-pane -t:.+
unbind BTab
bind   BTab select-pane -t:.-
unbind h
bind   h select-pane -L
unbind j
bind   j select-pane -D
unbind k
bind   k select-pane -U
unbind l
bind   l select-pane -R
unbind -n M-Left
bind   -n M-Left select-pane -L
unbind -n M-Down
bind   -n M-Down select-pane -D
unbind -n M-Up
bind   -n M-Up select-pane -U
unbind -n M-Right
bind   -n M-Right select-pane -R

# Swap current window left / right
unbind     M-PPage
bind    -r M-PPage swap-window -t-
unbind     M-NPage
bind    -r M-NPage swap-window -t+
unbind C-S-h
bind   C-S-h swap-window -t-  # Not working. Behaves like C-h. Why?
unbind C-S-l
bind   C-S-l swap-window -t+  # Not working. Behaves like C-l. Why?

# Direct access to windows beyond #9
# Note: To use these in gnome-terminal 3.6, select Edit/Keyboard Shortcuts...
#       and disable use of Alt+N to select tab #N. Can make it use Ctrl+N if
#       preferred, as gnome-terminal can recognize Ctrl+<Number>, but tmux can't
#       Disable a gnome-terminal by trying to map it to <Backspace>.
unbind -n M-0 ; bind -n M-0   select-window -t:10
unbind -n M-1 ; bind -n M-1   select-window -t:11
unbind -n M-2 ; bind -n M-2   select-window -t:12
unbind -n M-3 ; bind -n M-3   select-window -t:13
unbind -n M-4 ; bind -n M-4   select-window -t:14
unbind -n M-5 ; bind -n M-5   select-window -t:15
unbind -n M-6 ; bind -n M-6   select-window -t:16
unbind -n M-7 ; bind -n M-7   select-window -t:17
unbind -n M-8 ; bind -n M-8   select-window -t:18
unbind -n M-9 ; bind -n M-9   select-window -t:19
unbind    M-0 ; bind    M-0   select-window -t:20
unbind    M-1 ; bind    M-1   select-window -t:21
unbind    M-2 ; bind    M-2   select-window -t:22
unbind    M-3 ; bind    M-3   select-window -t:23
unbind    M-4 ; bind    M-4   select-window -t:24
unbind    M-5 ; bind    M-5   select-window -t:25
unbind    M-6 ; bind    M-6   select-window -t:26
unbind    M-7 ; bind    M-7   select-window -t:27
unbind    M-8 ; bind    M-8   select-window -t:28
unbind    M-9 ; bind    M-9   select-window -t:29

# Pane breaking and joining
bind < choose-window "join-pane -vs %%"
bind > break-pane  # Also ! by default

#----------------------------------------------------------------------
# Integration with X clipboard
#----------------------------------------------------------------------
# Transfer whatever is in the top tmux buffer to to both the
# X CLIPBOARD and PRIMARY (middle click) clipboards
unbind C-c
bind   C-c run "tmux save-buffer - | xclip -i -sel primary ; tmux save-buffer - | xclip -i -sel clipboard"

# For paste, I have to choose one X selection or another. We'll let C-v paste
# from CLIPBOARD, as that is consistent with other applications, but
# use C-p to paste the PRIMARY (middle-click buffer) instead. NOTE: It is
# a bit more logical to use C-S-v for this, but gnome-terminal intercepts that!
unbind C-v
bind   C-v run "xclip -o -sel clipboard | tmux load-buffer - ; tmux paste-buffer"
unbind C-p
bind   C-p run "xclip -o -sel primary | tmux load-buffer - ; tmux paste-buffer"

# Go a step further and do it as soon selection is made in copy-mode
# NOTE: DOES NOT WORK because -t vi-copy mappings only have access to
# the limited "copy-mode" commands, so they can't do anythig fancy.
# For kludgy workaround, see:
# http://comments.gmane.org/gmane.comp.terminal-emulators.tmux.user/1519
## unbind -t vi-copy Enter
## bind-key -t vi-copy   Enter copy-selection \; run "tmux save-buffer - | xclip -i -sel primary ; tmux save-buffer - | xclip -i -sel clipboard"

#----------------------------------------------------------------------
## Copy mode stuff
#----------------------------------------------------------------------

set-option -g mode-keys vi

unbind -t vi-copy    Home
bind   -t vi-copy    Home start-of-line  # Default: ^
unbind -t vi-copy     End
bind   -t vi-copy     End end-of-line    # Default: $

# These don't work because libvte, upon which gnome-terminal is based,
# is broken. It sends the same key code for Home and Ctrl-Home, for e.g.
# See https://bugzilla.gnome.org/show_bug.cgi?id=375652
# NOTE: THIS BUG IS SIX YEARS OLD!  Pathetic!
unbind -t vi-copy  C-Home
bind   -t vi-copy  C-Home history-top    # Default: g
unbind -t vi-copy   C-End
bind   -t vi-copy   C-End history-bottom # Default: G

unbind -t vi-copy C-Right
bind   -t vi-copy C-Right next-space-end # Default: E
unbind -t vi-copy  C-Left
bind   -t vi-copy  C-Left previous-space # Default: B


