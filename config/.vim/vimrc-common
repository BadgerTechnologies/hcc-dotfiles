" vim: set et sw=2 foldmethod=marker foldmarker={{{,}}}:

"====[ Basic options ]================================================== {{{1
" Use vim settings, not vi (yuck!)
set nocompatible

set nowrap         " I mostly write code, so don't word wrap by default.
set nolinebreak    " wrap exactly at window edge, not between words
set sw=8           " Shift width - how much to indent with tab key
set ts=8           " Tab stop - how far a tab char indents
set smarttab
set autoindent
set history=500    " This is the : cmd history. Use up arrorw for prev commands
set ruler          " Always show a window status line, even when only 1 win
set showcmd        " Show partially typed commands in status area
set incsearch      " Incremental search
set ignorecase     " the case of normal letters is ignored
set smartcase      " upper case letters in search turn off ignorecase
set wrapscan       " wrap to top of file on search
set showmatch      " When a bracket is inserted, briefly jump to the matching.
set whichwrap=,,<,>,[,],b,s
set hlsearch       " Highlight search results as
set gdefault       " assume the /g flag on :s substitutions to replace all matches in a line
set shell=/bin/zsh
set modeline       " read modelines
set modelines=5    " number of lines from top and bottom of file
filetype on        " Detect file types
set showfulltag    " Insert mode completion of tag shows whole funct prototype!
set hidden         " Allow a modified buffer to be not displayed in a window
set laststatus=2   " Always show a status line, even when only 1 window
" silent! suppresses error message for older Vim's that lack the option
silent! set colorcolumn=81 " Make the 81st column stand out (ColorColumn highlight)
set noswapfile     " Swap files are so annoying!
set number         " Mapping to toggle this: con (vim-unimpaired plugin)
silent! set relativenumber " cor  "   "    "     "
set cursorcolumn   " cox
set cursorline     " cox
behave xterm       " Mouse drag enters Visual mode instead of Select mode.
                   " behave sets several options. See help
set nostartofline
set path+=**       " File operations recurse directories

" New windows open below or to right of current one (why isn't this default?)
set splitbelow
set splitright

" Format Options
set formatoptions+=j " Delete comment char when joining commented lines
set formatoptions-=o " (don't) Insert the comment leader after hitting 'o' etc.
set formatoptions+=c " Auto-format comments in insert mode
set textwidth=78
set updatetime=300   " Vim's hover timeout. Default 4000. Want this low for more reactive coc plugins

" Tighter X server clipboard integration. Of these unnamed and unnamedplus
" are added to the defaults.
if !has('nvim')
  set clipboard=unnamed,unnamedplus,autoselect,exclude:cons\|linux
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" make the completion mode behave more like bash -- complete the longest
" string, then list the alternatives in a popup menu.
set wildmode=longest:full
set wildmenu
" I think this is the default: set wildchar=<Tab>
if has("nvim")
  " Only nvim has the "pum" wildoption, making the menu vertical. Since it's
  " vertical, all the mappings are sideways, so fix that here.
  set wildoptions=pum,tagfile
  " Due to a bug, the mapping of <Right> below requires whildcharm to be <tab>
  set wildcharm=<Tab>
  cnoremap <expr> <Up>    pumvisible() ? "\<Left>"  : "\<Up>"
  cnoremap <expr> <Down>  pumvisible() ? "\<Right>" : "\<Down>"
  cnoremap <expr> <Left>  pumvisible() ? "\<Up>"    : "\<Left>"
  cnoremap <expr> <Right> pumvisible() ? "\<Down>"  : "\<Right>"
endif

" Fix delay exiting insert mode using Esc. Default was 1000ms
" See https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000

" Re-use of existing windows when switching buffers:
set switchbuf=useopen,usetab,split

" Leader
let mapleader = ","
let maplocalleader = "\\"

if has("nvim")
  set inccommand=split  " Shows incremental results of substitute cmd in split
endif

augroup hcc_indents
autocmd!
" hard tabs are special in makefiles, don't expand them
autocmd FileType make set noexpandtab shiftwidth=8 nowrap
autocmd FileType c set noexpandtab shiftwidth=8 nowrap
autocmd FileType xml,cpp set expandtab shiftwidth=2 textwidth=0 colorcolumn=99 nowrap
autocmd FileType gitcommit set expandtab shiftwidth=4 textwidth=72 colorcolumn=72 wrap
autocmd FileType md,txt set expandtab shiftwidth=4 textwidth=79 wrap
autocmd FileType python,sh,perl set expandtab shiftwidth=4 textwidth=0 colorcolumn=99 nowrap
augroup END

" Make PgUp and PgDn keep the cursor on the same line of the screen
" http://vimrc-dissection.blogspot.com/2009/02/fixing-pageup-and-pagedown.html
map <silent> <PageUp> 1000<C-U>
map <silent> <PageDown> 1000<C-D>
imap <silent> <PageUp> <C-b>1000<C-U>
imap <silent> <PageDown> <C-b>1000<C-D>


set tags=tags,../tags,../../tags,../../../tags,../../../../tags

" Detect file changes in a timely manner
set autoread
augroup hcc_do_checktime
  autocmd!
  autocmd CursorHold * if mode() != 'c' | checktime | endif
augroup END

" Be a little bit more Common User Interface-like
set virtualedit=onemore,block
nmap <End> $l

" Temp disable some cpoptions that might affect the following bindings
" I'm not really sure this matters
let s:save_cpo = &cpoptions
set cpo&vim

"====[ C/C++ formatting options ]======================================= {{{1

" Indent C++ class declarations & constructor initializations, if they start
" on a new line, by double the shiftwidth
set cinoptions=i2s

" Indent a contination line of a long expression double the shiftwidth.
set cinoptions+=+2s

" This option must be set for the following two to work (W and m)
set cinoptions+=(0

" Indent line following a line ending with open-parenthesis double shiftwidth
" So arguments to a long function call will not start way over to the left,
" which makes going to a new line pointless!
set cinoptions+=W2s

" Line up a line starting with a closing parentheses with the first character
" of the line with the matching opening parentheses
set cinoptions+=m1

" Align with case label instead of the statement after it
set cinoptions+=l1

"====[ General Purpose Mappings ]======================================= {{{1
" backspace in Visual mode deletes selection
" vnoremap <BS> d

" SHIFT-Del is Cut
vnoremap <S-Del> "+x

" CTRL-Insert is Copy
vnoremap <C-Insert> "+y

" SHIFT-Insert is Paste (normal/visual, insert, and command-edit modes)
map <S-Insert>		"+gP
imap <S-Insert>		<C-o>"+gP
cmap <S-Insert>		<C-R>+

" Disable ZZ = :x to prevent accidental write when using zz with capslock on
map ZZ zz

" restore 'cpoptions'
set cpo&
let &cpoptions = s:save_cpo
unlet s:save_cpo

map <leader>rc :source ~/.vimrc<CR>:source ~/.gvimrc<CR>

" Like "Refresh" in a web browser. Center line with cursor and redraw screen.
map <F5> :norm zz<CR>:redraw!<CR>:nohl<CR>

" Kill current buffer without closing the window that it occupies.
map <leader>c :bp<CR>:bd#<CR>

" Enable / Disable Mouse mode (for use when running in terminal)
" Makes resizing splits mucc less painful
map <F9> :set mouse=a
map <S-F9> :set mouse=
set mouse=a  " Let's default to mouse On
if !has('nvim')
  set ttymouse=sgr   " Take advantage reasonable term support for mouse
endif

" Make CTRL-] show tab select list iff more than one match
nnoremap <C-]> g<C-]>

" Better than typing Esc:
:inoremap  jk <Esc>
:cnoremap  jk <Esc>
:onoremap  jk <Esc>
:snoremap  jk <Esc>
:inoremap  kj <Esc>
:cnoremap  kj <Esc>
:onoremap  kj <Esc>
:snoremap  kj <Esc>

" Toggle whether to use git grep vs. standard grep. The lhs of these mappings
" follows the conventions for toggle mappings in vim-unimpaired plugin.:w
:nmap ]og   :set grepprg=git\ grep\ -n\ $*<CR>
:nmap [og   :set grepprg=grep\ -r\ -n\ $*\ .<CR>
:nmap cog   :normal <C-R>=match(&grepprg, "^git") > -1 ? "[og" : "]og"<CR><CR>

" Source line or visual selection
nnoremap <leader>S ^"zy$:@z<cr>:echo 'sourced line.'<cr>
vnoremap <leader>S "zy:@z<cr>:echo 'Sourced selection.'<cr>

" Semi-colons are a much more convenient way to start a colon-command!
nnoremap ;  :
" However, the "repeat last motion" command is useful, so make Enter do that
" BUT, we want <Enter> to do it's normal thing in the QuickFix window, so
" we have to use a helper function
function! Repeat_last_motion_except_in_quickfix()
  if &buftype ==# 'quickfix'
    execute "normal! \<CR>"
  else
    normal! ;
  endif
endfunction

nnoremap <silent> <CR> :call Repeat_last_motion_except_in_quickfix()<CR>

" Analogous to C or D; easier to type
nnoremap Y y$

" I often want to change/copy/delete a word up to next underscore:
nnoremap cu  ct_
nnoremap yu  yt_
nnoremap du  dt_

" Really tired of accidentally starting macro recording, so let's make you
" have to press it twice, like you really mean it!
" NOTE: I didn't use Q for this because I make that toggle quickfix window
" BUG: in Nvim 0.3.1: When I map q to <nop> then, if I press q and let it
" timeout, then it will no longer recognize qq until I press escape.
" Workaround is to map it to <Esc> instead. TODO: Report this.
nnoremap q <Esc>
nnoremap qq q

" Neovim-specific Stuff. {{{2
if has('nvim')
  let g:python_host_prog = expand('~/ve/py2neovim/bin/python')
  let g:python3_host_prog = expand('~/ve/py3neovim/bin/python')
endif

" Tab Control. {{{2
" Overrides gh (start Select mode linewise)
:nnoremap gh :tabprev<CR>
:nnoremap gl :tabnext<CR>

:nnoremap gH :tabfirst<CR>
:nnoremap gL :tablast<CR>
" Don't want to override gn
:nnoremap g<Enter> :tabnew<CR>
:nnoremap gc :tabclose<CR>

" Override start Select mode blockwise)
:nnoremap g<C-H> :tabmove -1<CR>
:nnoremap g<C-L> :tabmove +1<CR>

" Functions to move current window to next / prev tab, since not built-in
" From: http://vim.wikia.com/wiki/Move_current_window_between_tabs
function! MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
    wincmd j
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function! MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < l:tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
    wincmd j
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

if has('nvim')
  " Neovim supports Alt-key mappings out of the box, using <M-x> syntax
  :nnoremap g<M-l> :call MoveToNextTab()<CR>
  :nnoremap g<M-h> :call MoveToPrevTab()<CR>
else
  " Regular vim doesn't recognize what tmux sends as an Alt + character
  " (which is Esc + character). These "set" commands fix that, as explained:
  " http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
  set <A-L>=l
  set <A-H>=h
  :nnoremap g<A-L> :call MoveToNextTab()<CR>
  :nnoremap g<A-H> :call MoveToPrevTab()<CR>
endif
" }}}2

" Window Control. Use <space> as alias for Ctrl-W {{{2
" I hate typing Ctrl-W, especially since this means "close tab or window" in
" other applications, which is bad if focus isn't where I think it is!
" And <space> has no real function in Normal mode.

" Note: Intentionally don't use noremap so that the rest of the C-w mapping
" will be followed.
:nmap <Space> <C-W>
" }}}2

" Window Control. Custom Mappings. {{{2

if has('nvim')
  " Move current window up or down. Focus moves with it
  " Requires nvim because vim's winnr() doesn't understand "h", "j", "k", "l".
  " Note: Was almost able to do a much simpler version using {nr} wincmd x
  " to exchange windows. It worked when there were only horizontal splits
  " but breaks down if vert splits are also present because of its peculiar
  " definition of what {nr} means. So, I had to do it the "hard way", which
  " I learned from the source of the win-windowswap plugin.
  function! MoveWinDirection(key_dir)
      " a:key_dir must be one of "h", "j", "k", "l"
      let this_win = winnr()
      let other_win = winnr(a:key_dir)
      if this_win == other_win
          return
      endif

      let this_buf = bufnr( "%" )
      let this_view = winsaveview()

      exec other_win . " wincmd w"
      let other_buf = bufnr( "%" )
      let other_view = winsaveview()
      exe this_win . " wincmd w"

      exe "hide buf " . other_buf
      call winrestview(other_view)
      exe other_win . " wincmd w"
      exe "hide buf " . this_buf
      call winrestview(this_view)
  endfunction

  :nnoremap <silent> <C-w><C-h> :call MoveWinDirection("h")<CR>
  :nnoremap <silent> <C-w><C-j> :call MoveWinDirection("j")<CR>
  :nnoremap <silent> <C-w><C-k> :call MoveWinDirection("k")<CR>
  :nnoremap <silent> <C-w><C-l> :call MoveWinDirection("l")<CR>

  " For up & down, define tmux-like mappings
  :nnoremap <silent> <C-w>{ :call MoveWinDirection("k")<CR>
  :nnoremap <silent> <C-w>} :call MoveWinDirection("j")<CR>
endif

" NOTE: Mapping to move current window into a split on the next or previous
" tab page is defined in the "Tab Control" section.

" }}}2


"====[ Abbreviations ]================================================== {{{1
" A few abbreviations for hcc:
" Kernel likes spaces after control-flow keywords, which is not what I'm used to:
" NOTE: Disable these for now. They don't work on LPDEV FC17 and RHEL5
" machines, and they're not all that useful anyways.
"" augroup hcc_c
"" autocmd!
"" autocmd filetype c iabbrev <buffer> if(      if (
"" autocmd filetype c iabbrev <buffer> for(     for (
"" autocmd filetype c iabbrev <buffer> while(   while (
"" autocmd filetype c iabbrev <buffer> switch(  switch (
"" autocmd filetype c iabbrev <buffer> iff      if () {<CR>;<CR><BS>}<Up><Up><End><Left><Left><Left>
"" autocmd filetype c iabbrev <buffer> forr     for (;;) {<CR>;<CR><BS>}<Up><Up><End><Left><Left><Left><Left><Left>
"" autocmd filetype c iabbrev <buffer> whilee   while () {<CR>;<CR><BS>}<Up><Up><End><Left><Left><Left>
"" augroup END


"====[ Highlight trailing whitespace brightly ]========================= {{{1

" This does not work on older VIM's that lack matchadd() & matchdelete():
if exists("*matchadd")
    " Enable or disable highlighting trailing whitespace for the current window.
    " Used with the augroup below. Original match regex came from:
    " https://github.com/peterlundgren/.home/blob/master/_vim/.vimrc
    function! EnableTrailingWhitespaceMatch(is_enable)
        if a:is_enable && !exists('w:trailing_whitespace_match')
            let w:trailing_whitespace_match = matchadd('WhitespaceError', '\s\+$\| \+\ze\t', -1)
        else
            if exists('w:trailing_whitespace_match')
                call matchdelete(w:trailing_whitespace_match)
                unlet w:trailing_whitespace_match
            endif
        endif
    endfunction

    " We have to use VimEnter & WinEnter to add the whitespace match separately
    " for each new window. However, it's annoying to see the red as I'm typing
    " so we'll toggle it OFF whenever we are in Insert mode.
    augroup TrailingWhitespaceGroup
        au!
        au VimEnter,WinEnter,InsertLeave * call EnableTrailingWhitespaceMatch(1)
        au InsertEnter * call EnableTrailingWhitespaceMatch(0)
    augroup END
endif " exists("*matchadd")


"====[ Shortcut to create header file double-inclusion guards ]========= {{{1

function! HeaderGuard ()
    " Include guard name is name of file, all upper case,
    " with all non-symbol chars replaced with underscore,
    " and with two leading underscores prepended
    let l:name = toupper(fnamemodify(bufname("%"), ":t"))
    let l:name = substitute(l:name, "[^A-Za-z0-9]", "_", "g")
    let l:name = '__' . l:name

    call append(0, '#ifndef ' . l:name)
    call append(1, '#define ' . l:name)
    call append(line('$'), '#endif  // ' . l:name)
endfunction
:command! HeaderGuard :call HeaderGuard()<CR>

if has('nvim')
    source ~/.config/nvim/hcc-vim-plug-config.vim
else
    source ~/.vim/hcc-vundle-conf.vim
endif

"====[ QuickFix Window ]================================================ {{{1
"====[ Toggle QuickFix Window ]========================================= {{{2
" From: http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
command! -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
    if exists("g:qfix_win") && a:forced == 0
        cclose
    else
        execute "copen | res " . g:Quickfix_Win_Height
    endif
endfunction

" used to track the quickfix window
augroup QFixToggle
    autocmd!
    autocmd BufWinEnter quickfix let g:qfix_win = bufnr("$")
    autocmd BufWinLeave * if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win | unlet! g:qfix_win | endif
augroup END

" Howard's Settings for QuickFix toggle:
nmap Q :QFix<CR>
let g:Quickfix_Win_Height = 12

"====[ Preserve height of QuickFix when maximizing other windows ]======= {{{2
" From: https://gist.github.com/dahu/3344530
function! MaximizeWithoutResizingQuickfix()
    let l:qfwnr = get(get(filter(map(range(1,winnr('$')), '[v:val, getwinvar(v:val, "&buftype")]'), 'v:val[1] =~ "quickfix"'), 0, []), 0, -1)
    if (l:qfwnr !=# winnr())
        let l:qfh = winheight(qfwnr)
        wincmd _
        if qfwnr != -1
            exe qfwnr . "wincmd w"
            exe "resize " . qfh
            wincmd p
        endif
    endif
endfunction

" Howard's mappings for the above
" Quickly move up & down between split windows using ^j and ^k
map <silent> <C-J> <C-W>j:call MaximizeWithoutResizingQuickfix()<CR>
map <silent> <C-K> <C-W>k:call MaximizeWithoutResizingQuickfix()<CR>
" NOTE: To not have to see one line from the minimized windows, do :set mwh=0

"====[ Highlight matches when jumping to next ]========================= {{{1
" From: Damian Conway, "More Instantly Better Vim" - OSCON 2013

" This does not work on older VIM's that lack matchadd() & matchdelete():
if exists("*matchadd")

    " This rewires n and N to do the highlighing...
    nnoremap <silent> n   n:call HLNext(0.4)<cr>
    nnoremap <silent> N   N:call HLNext(0.4)<cr>


    " ring the match in red...
    function! HLNext (blinktime)
        highlight RedOnRed ctermfg=red ctermbg=red
        let [bufnum, lnum, col, off] = getpos('.')
        let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
        echo matchlen
        let ring_pat = (lnum > 1 ? '\%'.(lnum-1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.\|' : '')
                \ . '\%'.lnum.'l\%>'.max([col-4,1]) .'v\%<'.col.'v.'
                \ . '\|'
                \ . '\%'.lnum.'l\%>'.max([col+matchlen-1,1]) .'v\%<'.(col+matchlen+3).'v.'
                \ . '\|'
                \ . '\%'.(lnum+1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.'
        let ring = matchadd('RedOnRed', ring_pat, 101)
        redraw
        exec 'sleep ' . float2nr(0.5 * a:blinktime * 1000) . 'm'
        call matchdelete(ring)
        redraw
    endfunction
endif " exists("*matchadd")


"====[ Make it real obvious when we're in Insert mode by changing background ]= {{{1
" Would rather this be local to current window only, but there
" doesn't seem to be a way to control the definition of the Normal highlight
" on a per-window basis. I would also prefer the background to be a very
" dark red, but the darkest possile is still too bright.
augroup ToggleBackgroundInInsertMode
    au!
    au InsertEnter * :highlight Normal ctermbg=233 guibg=#121212
    au InsertLeave * :highlight Normal ctermbg=17 guibg=#00005f
augroup END

" Ctrl-C does not trigger the InsertLeave autocmd; map to <Esc> instead
inoremap <C-c> <Esc>

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"====[ DiffOrig: Diff file with on-disk version ]======================= {{{1
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

"====[ vim-airline customization ]======================= {{{1
if has_key(get(g:, "plugs", {}), "vim-airline")
  let g:airline_theme="cool_hcc"
  let g:airline_powerline_fonts = 0  " Not looking right in gnome-terminal on 16.04?
  let g:airline_exclude_preview = 1
  let g:airline#parts#ffenc#skip_expected_string="utf-8[unix]"
endif

"====[ coc customization ]======================= {{{1
if has_key(get(g:, "plugs", {}), "coc.nvim")
  let g:coc_node_path = expand('~/.local/bin/node')
  let g:coc_global_extensions = [
    \ 'coc-git',
    \ 'coc-json',
    \ 'coc-python',
    \ 'coc-markdownlint',
    \ 'coc-vimlsp',
    \ 'coc-yaml',
    \ ]

  " Don't define autocommands and mappings unless really gets fully going
  " (User CocNvimInit event). Avoids errors on CursorHold when it's not
  " running. It can fail to init, for e.g. if node.js is not installed.
  function! s:hccCocSetup()
    augroup hcc_coc_nvim
      autocmd!
        " Highlight symbol under cursor on CursorHold
        autocmd CursorHold * silent call CocActionAsync('highlight')
        """" autocmd User CocNvimInit CocCommand python.setInterpreter '/usr/bin/python'
    augroup end

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    " Or use `complete_info` if your vim support it, like:
    " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

    " Navigate diagnostics
    nmap <silent> [e <Plug>(coc-diagnostic-prev)    " e for error
    nmap <silent> ]e <Plug>(coc-diagnostic-next)

    " Navigate git diff chunks. This maatches g:NERDTreeMapNextHunk
    nmap <silent> [g <Plug>(coc-git-prevchunk)
    nmap <silent> ]g <Plug>(coc-git-nextchunk)

    " git text objects
    omap ig <Plug>(coc-git-chunk-inner)
    xmap ig <Plug>(coc-git-chunk-inner)
    omap ag <Plug>(coc-git-chunk-outer)
    xmap ag <Plug>(coc-git-chunk-outer)

    " More git stuff
    nmap <silent> <leader>gc <Plug>(coc-git-commit)
    nmap <silent> <leader>gi <Plug>(coc-git-chunkinfo)
    nnoremap <silent> <leader>gs :CocCommand git.chunkStage<CR>
    nnoremap <silent> <leader>gu :CocCommand git.chunkUndo<CR>
    nnoremap <silent> <leader>gf :CocCommand git.foldUnchanged<CR>

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Remap for rename current word
    nmap <F2> <Plug>(coc-rename)

    " Remap for format selected region
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " select selections ranges, needs server support, like: coc-tsserver, coc-python
    nmap <silent> ]r <Plug>(coc-range-select)
    xmap <silent> ]r <Plug>(coc-range-select)
    nmap <silent> [r <Plug>(coc-range-select-backward)
    xmap <silent> [r <Plug>(coc-range-select-backward)

    " Use `:Format` to format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " use `:OR` for organize import of current buffer
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
  endfunction

  autocmd User CocNvimInit call s:hccCocSetup()
endif

"====[ nerdtree customization ]======================= {{{1

if has_key(get(g:, "plugs", {}), "nerdtree")
  let g:NERDTreeGitStatusWithFlags = 1
  let g:NERDTreeIgnore = ['\~$', '\.o$', '\.so$', '\.a', '\.pyc']

  " Single-click to expand directories, double click to open file
  let g:NERDTreeMouseMode = 2
  "
  " sync open file with NERDTree
  " " Check if NERDTree is open or active
  function s:isCurrentWindowNERDTree()
    return bufname('%') =~# '^NERD_tree_'
  endfunction

  function! s:isNERDTreeOpen()
    return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
  endfunction

  " Whenever we switch to any window (other than the NERDTree window),
  " if NERDTree is open in this tab, Move NERDTree's selection to the
  " buffer's file.
  function! s:syncNERDTree()
    if &modifiable && s:isNERDTreeOpen() && strlen(expand('%')) > 0 && !s:isCurrentWindowNERDTree() && !&diff
      NERDTreeFind
      wincmd p
    endif
  endfunction

  " s:syncNERDTree can't do the sync when NERDTree is first being opened
  " (calling NERDTreeFind from within the event triggered by initial opening
  " of NERDTree causes it to open two NERDTree windows!)
  " But I still want the sync behavior on initial open. So this function
  " will use NERDTreeFind to do the open when appropriate.
  " A good reference for debugging these events is:
  " https://vi.stackexchange.com/questions/4292/why-nerdtree-doesnt-trigger-the-autocommand-bufenter
  function! s:myNERDTreeToggle()
    if !s:isNERDTreeOpen()
      NERDTreeFind
    else
      NERDTreeToggle
    endif
  endfunction

  " Highlight currently open buffer in NERDTree
  augroup hcc_nerd_tree
    autocmd!
    autocmd BufEnter * call s:syncNERDTree()
  augroup end

  nnoremap <C-n> :call <SID>myNERDTreeToggle()<CR>

  " The default for these was ]c,[c (for chunk), but I like [g (for git)
  let g:NERDTreeGitStatusMapNextHunk = ']g'
  let g:NERDTreeGitStatusMapPrevHunk = '[g'
endif " have nerdtree

"====[ color ]======================= {{{1

" TODO: For now, not enabling termguicolors (24-bit color) until I get
" my tmux config to support it and work out how to test for too-old
" tmux version.

" Colors here that are indented one extra level are ones that I modified.
" Mostly I made them brighter to increase contrast with dark background
let g:onedark_color_overrides = {
    \ "red": { "gui": "#ff0000", "cterm": "161", "cterm16": "9" },
  \ "dark_red": { "gui": "#BE5046", "cterm": "196", "cterm16": "9" },
  \ "green": { "gui": "#98C379", "cterm": "114", "cterm16": "2" },
    \ "yellow": { "gui": "#f0f000", "cterm": "226", "cterm16": "11" },
  \ "dark_yellow": { "gui": "#D19A66", "cterm": "173", "cterm16": "11" },
    \ "blue": { "gui": "#00d7ff", "cterm": "45", "cterm16": "6" },
    \ "purple": { "gui": "#ff87ff", "cterm": "213", "cterm16": "13" },
    \ "cyan": { "gui": "#57ffff", "cterm": "27", "cterm16": "14" },
    \ "white": { "gui": "#ffffff", "cterm": "255", "cterm16": "15" },
  \ "black": { "gui": "#282C34", "cterm": "235", "cterm16": "0" },
  \ "visual_black": { "gui": "NONE", "cterm": "NONE", "cterm16": "0" },
    \ "comment_grey": { "gui": "#afafff", "cterm": "147", "cterm16": "15" },
    \ "gutter_fg_grey": { "gui": "#c0c0c0", "cterm": "250", "cterm16": "15" },
    \ "cursor_grey": { "gui": "#000087", "cterm": "18", "cterm16": "4" },
    \ "visual_grey": { "gui": "#004296", "cterm": "20", "cterm16": "15" },
  \ "menu_grey": { "gui": "#3E4452", "cterm": "237", "cterm16": "8" },
  \ "special_grey": { "gui": "#3B4048", "cterm": "238", "cterm16": "15" },
    \ "vertsplit": { "gui": "#d70000", "cterm": "160", "cterm16": "9" },
\}

let g:hcc_other_colors = {
    \ "vertsplit_bg": { "gui": "#afffff", "cterm": "159", "cterm16": "14" },
    \ "search_bg": { "gui": "#E5C07B", "cterm": "180", "cterm16": "3" },
    \ "normal_bg": { "gui": "#00005f", "cterm": "17", "cterm16": "0" },
    \ "folded_bg": { "gui": "#005faf", "cterm": "25", "cterm16": "0" },
\}

function! HccCustomizeOnedark()
  highlight WhitespaceError guifg=#000000 guibg=#ff0000 guisp=NONE gui=NONE ctermfg=0 ctermbg=196
  " Default CocWarningSign was to dull:
  highlight CocWarningSign guifg=#ffaf00 ctermfg=214 ctermbg=NONE

  if g:colors_name != 'onedark'
    return
  endif
  call onedark#extend_highlight("Normal", { "bg": g:hcc_other_colors["normal_bg"] })

  call onedark#extend_highlight("Function", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("cssFunctionName", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("goFunctionCall", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("javaScriptFunction", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("jsFunction", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("perlFunction", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("phpFunction", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("phpFunctions", { "fg": g:onedark_color_overrides["purple"] })
  call onedark#extend_highlight("rubyFunction", { "fg": g:onedark_color_overrides["purple"] })

  call onedark#extend_highlight("String", { "fg": g:onedark_color_overrides["red"], "cterm": "bold" })
  call onedark#extend_highlight("jsonString", { "fg": g:onedark_color_overrides["red"], "cterm": "bold" })
  call onedark#extend_highlight("jsonKeyword", { "fg": g:onedark_color_overrides["red"], "cterm": "bold" })
  call onedark#extend_highlight("rubyStringDelimiter", { "fg": g:onedark_color_overrides["red"], "cterm": "bold" })

  call onedark#extend_highlight("Number", { "fg": g:onedark_color_overrides["red"] })
  call onedark#extend_highlight("javaScriptNumber", { "fg": g:onedark_color_overrides["red"] })
  call onedark#extend_highlight("jsonNumber", { "fg": g:onedark_color_overrides["red"] })

  call onedark#extend_highlight("Statement", { "fg": g:onedark_color_overrides["yellow"] })

  call onedark#extend_highlight("VertSplit", { "bg": g:hcc_other_colors["vertsplit_bg"] })
  call onedark#extend_highlight("SignColumn", { "bg": g:onedark_color_overrides["black"] })
  call onedark#extend_highlight("Folded",
    \ { "bg": g:hcc_other_colors["folded_bg"],
    \   "fg": g:onedark_color_overrides["white"] })

  call onedark#extend_highlight("Todo",
    \ { "fg": g:onedark_color_overrides["white"],
    \   "bg": g:onedark_color_overrides["red"]})

  call onedark#extend_highlight("Search",
    \ { "fg": g:onedark_color_overrides["black"],
    \   "bg": g:hcc_other_colors["search_bg"] })
endfunction

augroup colorextend
  autocmd!
  autocmd ColorScheme * call HccCustomizeOnedark()
augroup end

syntax on
try
  colorscheme onedark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme hcc
endtry

"====[ Vista customization ]======================= {{{1
if has_key(get(g:, "plugs", {}), "vista.vim")

  let g:vista_default_executive = 'coc'  " Default: 'ctags'
  let g:vista_finder_alternative_executives = ['ctags']
  let g:vista_sidebar_width = 50
  let g:vista#renderer#enable_icon = 0

  nnoremap <leader>v  :Vista!!<CR>

  " TODO:
  " - When switch to the vista window, make it move cursor to highlighted symbol
  " - Fix folding inside vista. Or quick filtering by type. Ah, according to
  "   docs, this works only for ctags executive for now (I use coc)
  " - Fix color of highlighted symbol in vista window
  " - Make pretty icons work (airline font?)

endif  " have vista.vim

"====[ Experimental / Broken ]========================================== {{{1

" Filter current buffer to a new temporary buffer (i.e current buffer grep)
command! -nargs=0 Filter let @f='' | execute 'g//y F' | new | setlocal bt=nofile | put! f

" Same thing, but invert the filter, selecting lines that do NOT match
command! -nargs=0 FilterV let @f='' | execute 'v//y F' | new | setlocal bt=nofile | put! f
" Supposedly better/faster method using redir, but I couldn't get it to work:
" It would only copy first match into the buffer for reasons I don't fathom.
""command! -nargs=0 Filter redir @f> | g// | redir END | new | put! f

" This mapping does not work. Maybe the terminal does not send Ctrl+Arrows?
" Scroll window up or down a bit, preserving cursor pos in buffer:
nnoremap <C-Down> <C-E>
nnoremap <C-Up> <C-Y>
