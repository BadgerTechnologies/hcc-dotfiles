# .bashrc

# Fix $SHELL, since we often inherited csh's idea of $SHELL
export SHELL=/bin/zsh


# Set display right after ssh from my workstation
if [ -e ~/.DISPLAY ]; then
    export DISPLAY=`cat ~/.DISPLAY`
fi

# Make completions case-insensitive
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
autoload -U compinit
compinit -C # -C means just use cached .zcompdump unconditionally


# Loads term color sequences into variables used by prompt
source ~/.zsh/gencolors 

# Actually set my prompt.  Depends on already sourcing gencolors above
source ~/.zsh/setprompt

#alias ls='ls --color=auto -F'
alias ls='ls --color=auto -F'
#alias ll='ls -l'
#alias locate='locate --database=~/lib/.locatedb'

# Automatically list choices on an ambiguous completion.
setopt AUTO_LIST

# Make cd push the old directory onto the directory stack.
setopt AUTO_PUSHD PUSHD_MINUS

setopt NO_BG_NICE

setopt NO_CLOBBER

setopt NO_HUP

# If a pattern for filename generation has no matches, delete the pattern from the argument list; do not report an error unless all the patterns in a command have no matches. Overrides NOMATCH.
setopt CSH_NULL_GLOB

setopt HIST_NO_STORE

# Whenever the user enters a line with history expansion, don't execute the line directly; instead, perform history expansion and reload the line into the editing buffer.
setopt HIST_VERIFY

# Do not exit on end-of-file.
setopt IGNORE_EOF

# (No) Beep on an ambiguous completion.
setopt NO_LIST_BEEP

# When listing files that are possible completions, show the type of each file with a trailing identifying mark.
setopt LIST_TYPES

# Don't print exit status when non-zero. My prompt does that already
unsetopt PRINT_EXIT_VALUE

# Perform implicit tees or cats when multiple redirections are attempted (see 6. Redirection).
setopt MULTIOS

# Report the status of background jobs immediately, rather than waiting until just before printing a prompt.
setopt NOTIFY

# Perform a path search even on command names with slashes in them.
setopt PATH_DIRS

# Perform foo=/path/to/filename expansion
setopt EQUALS

# long jobs listing
setopt long_list_jobs

# set ignore case for ls etc
setopt no_case_glob

# Recognize the # character in interactive command line
setopt INTERACTIVE_COMMENTS

# Split var references into words when values have spaces (like bash & tcsh)
setopt SH_WORD_SPLIT

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath

limit coredumpsize 0


fpath=(~/.zsh/functions $fpath)



# I like ls -s to tell me the number of blocks in 1K blocks.
BLOCKSIZE=K ; export BLOCKSIZE

# Give me "time" usage for any non-bg cmd that takes more than 2s sys & usr time
REPORTTIME=2

# Setup key bindings.  For some stupid reason, Home and End keys don't work
# out of the box!
bindkey -e # Emacs bindings
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line

# LS aliases
alias ls='ls --color=auto -Fs'
alias ll='ls --color=auto -lF'
alias la='ls --color=auto -aF'
alias lla='ls --color=auto -latrF'
alias lls='ls --color=auto -ltrF'

# List only directories and symbolic links that point to directories.
# Takes an optional directory name as argument and searches relative to it.
# Parens make whole thing happen in subshell so cd not permanent
function lsd() { 
   ( if [ $1 ]; then 
         \cd $1;
     fi
     ls -ld *(-/DN)
   )
}

function namedir () {
	if [ ! ! "$2" ]
	then
		dir="$2"
	else
		dir="$PWD"
	fi

	eval "$1=$dir"
	echo ~$1 >& /dev/null
}


# color-ls This sets LS_COLORS for my dark background
eval `dircolors --sh`

# These vars only make sense for an interactive shell, so they're in zshrc
export HISTIGNORE=ls:ll:lls:la:c
export HISTSIZE=16384
export SAVEHIST=$HISTSIZE
export HISTFILE=$HOME/.zsh_history

export GREP_OPTIONS='--exclude=*.svn* --directories=recurse --binary-files=without-match --color=auto'
export GREP_COLOR='1;32'

function ..() { cd .. }
## alias cd='cd -L' # This interferes with tab completion on the cd command
alias rm='rm -i'
alias c=clear
alias m=less
alias h=history
alias hi='history | tail -25'
alias dh='dirs -v'
alias j='jobs -l'
alias eat='cat > /dev/null'
alias mv="mv -i"
alias a=alias
alias u=unalias
alias mroe=more
alias ga='a | egrep '

# A few global aliases of interest
alias -g NF='$(\ls *(.om[1]))'    # newest file
alias -g ND='$(\ls -d *(/om[1]))' # newest directory
alias -g G='| grep'
alias -g L='| less'


# ross' great idea
alias psg='ps auxw | grep '


# Lexmark LPDEV Setup
alias mlsinit='eval `/m/mls/tools/bin/mlsinit`'
mlsinit
export MLS_EXPERT=1
export HWSIM_DATA_DIR=~/hwsim_data_dir
alias mstatreal 'mstatus | grep -v "^[?]"'
alias mstatusreal mstatreal


# This is necessary becuase the default (un_US.UTF-8) messes up DDD
export LANG=C

alias s='send9100 -t0'
a rr='rm -f *~ .*~'
alias vncs='vncserver -cc 3 -geometry 1152x900'

cm()  { cmyk_viewer PSPAGE${1}.pam.gz & }
alias cm1='cm 01'
alias cm2='cm 02'
alias cm3='cm 03'
alias cm4='cm 04'
alias cm5='cm 05'
alias cm6='cm 06'
alias cm7='cm 07'
alias cm8='cm 08'
alias cm9='cm 09'

alias t='cd ~/t'
a rs='runpage4 -S Page4'

## Metro Stuff
alias mkxps='make -C libxps install'
alias m4='nice +4 make -j4'
alias m8='nice +4 make -j8'
alias xa='xpsapp/xpsapp ${(z)XA_OPTIONS}'
alias xaa='xpsapp/xpsapp'
alias xr='xpsapp/xpsapp ${(z)XA_OPTIONS} $TC && ( cm1 )'
alias dddxa='ddd xpsapp/xpsapp &'
alias dxa=dddxa
export XA_OPTIONS='--device testing-color -l log -T log -f'
alias stc='vared TC'
alias sxo='vared XA_OPTIONS'

stc() { export TC=$* }
alias ptc='echo $TC'

# Previous globbing-method to do bldtarget completions based on globbing:
#function complete-mls-target () {
#	if [ ! -e bconfig ] ; then
#	    return
#	fi
#
#	targets=( bconfig/*.target )
#	for i in "${targets[@]}" ; do
#	    compadd -- $(echo $i | sed -e 's/bconfig\/\(.*\).target/\1/')
#	done
#}

# Shortened output of the mls 'builds' command.  This works by filtering
# out headers and other undesireable rows, then cutting out only the
# actual build name from the result. For use in bldtarget completion.
function short-build-list () {
    builds | egrep -v '^[>)]|^ *[-A-Z]|^[*]|^$' | cut --delimiter=' ' -f 2
}

function complete-mls-target2 () {
    compadd -- $(short-build-list)
}
compdef complete-mls-target2 bldtarget

namedir mt ~/t/metro
namedir mp ~/t/metro/ptr
namedir fts /tc/pfv/c22/firmwaretestlex/xps/qualitylogic/XPS_FTS_v1.0/usletter
namedir ftsi /tc/pfv/c22/firmwaretestlex/xps/qualitylogic/XPS_FTS_v1.0/usletter/fts_individual
namedir cet /tc/pfv/c22/firmwaretestlex/xps/qualitylogic/XPS_CET_v1.0/usletter
namedir ceti /tc/pfv/c22/firmwaretestlex/xps/qualitylogic/XPS_CET_v1.0/usletter/cet_individual




